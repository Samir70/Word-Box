{"version":3,"sources":["Components/GrabbedText.js","Components/Reader.js","Components/TextCatalogue.js","Components/WordListCheckbox.js","Components/WordListDisplay.js","Components/TestPage.js","Components/TestMaker.js","Components/WordModal.js","Assets/Vocab.js","App.js","serviceWorker.js","index.js"],"names":["GrabbedText","props","knownNouns","i","knownWords","nouns","length","foreignNoun","foreign","push","knownVerbs","verbs","foreignInfinitive","infinitive","presentForeign","concat","knownAdjectives","adjectives","foreignAdjectiveFemale","female","foreignAdjectiveMale","male","foreignAdjectiveNeuter","neuter","knownDefArticles","defArticle","toLowerCase","allKnownWords","allKnownWordsUpperFirstChar","map","word","index","charAt","toUpperCase","slice","allKnownWordsUpperAll","buttonStyles","display","fontSize","margin","marginBottom","marginTop","marginLeft","marginRight","knownWordStyle","color","unknownWordStyle","newWordArray","text","match","includes","react_default","a","createElement","key","style","textAlign","paddingTop","width","title","id","padding","Button","onClick","editText","deleteText","Reader","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNewText","updateMode","clearStateTextInfo","componentWillReceiveProps","nextProps","setState","currentTitle","userTextInput","editSavedText","goToStudyMode","handleChangeText","event","target","value","handleChangeTitle","hideSaveAlert","showSaveAlert","saveEditedText","state","saveText","pastedText","refs","myTextArea","updateText","myTitleArea","updateTitle","splitUpText","split","firstFiveWords","defaultTitle","d","Date","fullTime","toTimeString","dd","getDate","mm","getMonth","timeAndDate","getFullYear","toString","substr","handleClose","updatedTitle","mode","textAreaStyles","mainAreaStyles","textBoxStyle","border","className","ref","placeholder","onChange","rows","cols","variant","Toast_default","position","bottom","left","transform","backgroundColor","onClose","delay","autohide","Body","Components_GrabbedText","React","Component","TextCatalogue","listStyle","listStyleType","linkStyle","linkDivStyle","paddingBottom","savedTexts","textsArray","item","href","goToReader","WordListCheckbox","selection","nounsBtn","verbsBtn","adjBtn","ButtonGroup","vertical","click","Form","Group","Control","type","changeSearch","Check","label","changeCheckBox","WordListDisplay","wordList","types","words","english","filter","x","searchFromStart","indexOf","searchFor","sort","wordClick","dictionaryLink","dictionaryJSX","rel","Container","Row","Col","Components_WordListCheckbox","changeTypes","foreignLang","TestPage","transMode","questionSentence","testQ","answerSentence","placeHolderText","language","answerWords","markedAns","userAns","changeAns","switchModeClick","randInt","n","Math","floor","random","capitalise","w","replace","c","rndElement","arr","rndSentence","wList","defArt","noun","adj","noun1","verb1","adj1","gender","pronouns","verb","person","verbPerson","present","pronounVerb","verbBody","Table","striped","bordered","hover","responsive","nounBody","wordAndGender","mfnBody","m","f","WordModal","Modal","show","word2Modal","allWords","wordType","FindWord","modalBody","MakeBody","onHide","centered","Header","closeButton","Title","Footer","disabled","Noun","eng","_foreign","g","_gender","Verb","_infinitive","_present","Array","from","_presentForeign","Adjective","beer","wine","dog","table","banana","tree","bed","woman","man","car","gift","hospital","night","dandelion","toBe","toDo","young","old","small","large","blue","green","beautiful","healthy","strong","cold","hot","App","typesToShow","translationMode","userAnswer","sentences","tabToShow","readerMode","wordToSearchFor","showWordModal","modalWord","changeToShow","category","ttShow","switchModeHandler","newMode","ChangeAnswerHandler","ans","changeSearchWord","wordClicked","modalClose","newTextObj","saveToLocalStorage","changeStartChecked","componentWillMount","localStorage","getItem","JSON","parse","textTitle","splice","setItem","stringify","e","matchingText","preventDefault","editedTitle","editedText","textObj","updateReaderMode","_this2","Tabs","activeKey","onSelect","fill","Tab","eventKey","Components_Reader","Components_TextCatalogue","Components_WordListDisplay","src_Components_TestPage","Components_WordModal","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffa4c2d1.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Button} from  'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst GrabbedText = (props) => {\r\n\r\n        let knownNouns = []\r\n        for (let i = 0; i < props.knownWords.nouns.length; i++) {\r\n            let foreignNoun = props.knownWords.nouns[i].foreign\r\n            knownNouns.push(foreignNoun)\r\n        }\r\n\r\n        let knownVerbs = []\r\n        for (let i = 0; i < props.knownWords.verbs.length; i++) {\r\n            let foreignInfinitive = props.knownWords.verbs[i].infinitive\r\n            knownVerbs.push(foreignInfinitive)\r\n            let presentForeign = props.knownWords.verbs[i].presentForeign\r\n            knownVerbs = knownVerbs.concat(presentForeign)\r\n        }\r\n\r\n        let knownAdjectives = []\r\n        for (let i = 0; i < props.knownWords.adjectives.length; i++) {\r\n            let foreignAdjectiveFemale = props.knownWords.adjectives[i].foreign.female\r\n            let foreignAdjectiveMale = props.knownWords.adjectives[i].foreign.male\r\n            let foreignAdjectiveNeuter = props.knownWords.adjectives[i].foreign.neuter\r\n            knownAdjectives.push(foreignAdjectiveFemale, foreignAdjectiveMale, foreignAdjectiveNeuter)\r\n        }\r\n\r\n        let knownDefArticles = []\r\n        knownDefArticles.push(props.knownWords.defArticle.foreign.male.toLowerCase())\r\n        knownDefArticles.push(props.knownWords.defArticle.foreign.female.toLowerCase())\r\n        knownDefArticles.push(props.knownWords.defArticle.foreign.neuter.toLowerCase())\r\n\r\n        let allKnownWords = []\r\n\r\n        allKnownWords = allKnownWords.concat(knownNouns, knownVerbs, knownAdjectives, knownDefArticles)\r\n\r\n        let allKnownWordsUpperFirstChar = allKnownWords.map(function(word, index) {\r\n            return word.charAt(0).toUpperCase() + word.slice(1)\r\n        })\r\n\r\n        let allKnownWordsUpperAll = allKnownWords.map(function(word, index) {\r\n            return word.toUpperCase()\r\n        })\r\n\r\n        const divStyle = {\r\n            fontSize: 20,\r\n            marginBottom: '20px',\r\n            margin: 'auto',\r\n            display: 'block',\r\n            width: '100%',\r\n            padding: '20px'\r\n        }\r\n\r\n        const titleStyle = {\r\n            fontSize: 30,\r\n            textAlign: 'center',\r\n            paddingTop: 20,\r\n            width: '100%'\r\n        }\r\n\r\n        const buttonStyles = {\r\n            display: 'inline-block',\r\n            fontSize: '20px',\r\n            margin: '0 auto',\r\n            marginBottom: '100px',\r\n            marginTop: '20px',\r\n            marginLeft: 5,\r\n            marginRight: 5\r\n        }\r\n\r\n        const knownWordStyle = {\r\n            color: 'green'\r\n        }\r\n\r\n        const unknownWordStyle = {\r\n            color: 'red'\r\n        }\r\n\r\n        let splitText = props.text.match(/\\w+|\\s+|[^\\s\\w]+/g)\r\n\r\n        let newWordArray = splitText.map(function (word, index) {\r\n            if (!word.match(/\\w+/g)) {\r\n                return word\r\n            } else {\r\n                \r\n            if (allKnownWords.includes(word) || allKnownWordsUpperFirstChar.includes(word) || allKnownWordsUpperAll.includes(word)) {\r\n            \r\n            return (\r\n                <span key={word+index} style = {knownWordStyle}>{word}</span>\r\n            )\r\n\r\n        } else {\r\n            return (\r\n                <span key={word+index} style={unknownWordStyle}>{word}</span>\r\n            )\r\n        }\r\n    }\r\n    }\r\n    )\r\n\r\n        return (\r\n            <div>\r\n                <h2 style={titleStyle}>{props.title}</h2>\r\n                <div id='grabbedText' style = {divStyle}>{newWordArray}</div>\r\n                <Button style={buttonStyles} onClick={props.editText}>Edit</Button>\r\n                <Button style={buttonStyles} onClick={props.deleteText}>Delete</Button>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default GrabbedText\r\n","import React from 'react'\r\nimport GrabbedText from './GrabbedText'\r\nimport {Button} from  'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Toast from 'react-bootstrap/Toast'\r\n\r\nclass Reader extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            mode: this.props.mode,\r\n            currentTitle: '',\r\n            userTextInput: '',\r\n            showSaveAlert: false\r\n        }\r\n    }\r\n\r\n    addNewText = () => {\r\n        this.props.updateMode('paste')\r\n        this.props.clearStateTextInfo()\r\n    }\r\n\r\n    /*this is included for when edit-saved-text mode is opened and the initial values of the input fields need to be the \r\n    same as the title and text values of App's state. They have to be in Reader's state to allow the user to use the input\r\n    elements on the page*/ \r\n    componentWillReceiveProps = (nextProps) => {\r\n        this.setState(\r\n            {currentTitle: nextProps.title,\r\n            userTextInput: nextProps.text\r\n            }\r\n        )\r\n    }\r\n\r\n    deleteText = () => {\r\n        this.props.deleteText()\r\n    }\r\n\r\n    editSavedText = () => {\r\n        this.props.updateMode('edit-saved')\r\n    }\r\n\r\n    goToStudyMode = () => {\r\n        this.props.updateMode('study')\r\n    }\r\n\r\n    handleChangeText = (event) => {\r\n        this.setState(\r\n            {userTextInput: event.target.value}\r\n        )\r\n    }\r\n\r\n    handleChangeTitle = (event) => {\r\n        this.setState(\r\n            {currentTitle: event.target.value}\r\n        )\r\n    }\r\n\r\n    hideSaveAlert = () => {\r\n        this.setState(\r\n            {showSaveAlert: false}\r\n        )\r\n    }\r\n\r\n    saveEditedText = () => {\r\n        this.props.saveEditedText(this.state.currentTitle, this.state.userTextInput)\r\n        this.setState(\r\n            {showSaveAlert: true}\r\n        )\r\n        this.props.updateMode('read')\r\n    }\r\n\r\n    saveText = () => {\r\n        var pastedText = this.refs.myTextArea.value\r\n        this.props.updateText(pastedText)\r\n\r\n\r\n        var title\r\n        if (this.refs.myTitleArea.value !== '') {\r\n            title = this.refs.myTitleArea.value\r\n            this.props.updateTitle(title)\r\n        } else {\r\n            let splitUpText = this.refs.myTextArea.value.split(' ')\r\n            if (splitUpText.length < 6) {\r\n                var firstFiveWords = splitUpText.slice(0, splitUpText.length) \r\n                var defaultTitle = ''\r\n                for (let i = 0; i < splitUpText.length; i++){\r\n                    defaultTitle = defaultTitle + firstFiveWords[i] + ' '\r\n                    }\r\n                    defaultTitle = defaultTitle.slice(0, -1)\r\n                    defaultTitle = defaultTitle + '...'\r\n                    title = defaultTitle\r\n                    this.props.updateTitle(title)\r\n                } else {\r\n                    firstFiveWords = splitUpText.slice(0, 6) \r\n                    defaultTitle = ''\r\n                    for (let i = 0; i < 6; i++ ){\r\n                        defaultTitle = defaultTitle + firstFiveWords[i] + ' '\r\n                    }\r\n                    defaultTitle = defaultTitle.slice(0, -1)\r\n                    defaultTitle = defaultTitle + '...'\r\n                    title = defaultTitle\r\n                    this.props.updateTitle(title)\r\n                }\r\n            }\r\n\r\n        let d = new Date()\r\n        let fullTime = d.toTimeString()\r\n        fullTime = fullTime.split(' ')[0]\r\n\r\n        let dd = d.getDate()\r\n        let mm = d.getMonth() + 1\r\n        let yy = d.getFullYear().toString().substr(-2)\r\n        if (dd < 10) {\r\n        dd = '0' + dd \r\n        }\r\n        if (mm < 10) {\r\n        mm = '0' + mm\r\n        }\r\n        let fullDate = dd + '/' + mm + '/' + yy\r\n        let timeAndDate = fullTime + ' ' + fullDate\r\n        \r\n        this.props.saveText(timeAndDate, title, pastedText)\r\n        this.setState(\r\n            {showSaveAlert: true}\r\n        )\r\n        this.props.updateMode('read')\r\n    }\r\n\r\n    handleClose = () => {\r\n        this.setState(\r\n            {showSaveAlert: false}\r\n        )\r\n    }\r\n\r\n    updateTitle = (updatedTitle) => {\r\n        this.props.updateTitle(updatedTitle)\r\n        }\r\n\r\n    render() {\r\n\r\n        const textAreaStyles = {\r\n            fontSize: 20,\r\n            marginBottom: '20px',\r\n            margin: 'auto',\r\n            display: 'block',\r\n            width: '60%'\r\n        }\r\n        \r\n        const mainAreaStyles = {\r\n            display: 'block'\r\n        }\r\n\r\n        const textBoxStyle = {\r\n            border: '2px solid black',\r\n            fontSize: 20,\r\n            marginBottom: '20px',\r\n            marginTop: '100px',\r\n            margin: 'auto',\r\n            padding: 20,\r\n            display: 'block',\r\n            width: '60%',\r\n            textAlign: 'left'\r\n        }\r\n\r\n        const buttonStyles = {\r\n            display: 'inline-block',\r\n            fontSize: '20px',\r\n            margin: '0 auto',\r\n            marginBottom: '100px',\r\n            marginTop: '20px',\r\n            marginLeft: 5,\r\n            marginRight: 5\r\n        }\r\n\r\n        const alertStyle = {\r\n                position: 'fixed',\r\n                bottom: '5px',\r\n                left: '50%',\r\n                transform: 'translateX(-50%)',\r\n                backgroundColor: '#28a745',\r\n                fontSize: 15\r\n        }\r\n\r\n        if (this.props.mode === 'paste'){\r\n\r\n            return (\r\n\r\n                <div id='main-area' style={mainAreaStyles} className=\"form-group\">\r\n                    <input className=\"form-control\" ref='myTitleArea' placeholder='Enter title...' style={textAreaStyles} onChange={this.handleChangeTitle} value={this.state.currentTitle}></input>\r\n                    <textarea className=\"form-control\" id='textArea' ref='myTextArea' rows='20' cols='80' placeholder='Paste your text here...' value={this.state.userTextInput} style={textAreaStyles} onChange={this.handleChangeText}></textarea>\r\n                    <Button variant='primary' onClick={this.saveText} style={buttonStyles}>Save</Button>\r\n                </div>\r\n\r\n    )} else if (this.props.mode === 'read' && this.state.showSaveAlert === false){\r\n\r\n            return (\r\n                <div>\r\n                    <h2>{this.props.title}</h2>\r\n                    <div style={textBoxStyle}>{this.props.text}</div>\r\n                    <Button variant='primary' style={buttonStyles} onClick={this.editSavedText}>Edit</Button>\r\n                    <Button variant='primary' style={buttonStyles} onClick={this.goToStudyMode}>Study</Button>\r\n                    <Button variant='primary' style={buttonStyles} onClick={this.addNewText}>Add new text</Button>\r\n                    <Button variant='primary' style={buttonStyles} onClick={this.deleteText}>Delete</Button>\r\n                </div>\r\n            )\r\n\r\n    } else if (this.props.mode === 'read' && this.state.showSaveAlert === true){\r\n\r\n        return (\r\n            <div>\r\n                <h2>{this.props.title}</h2>\r\n                <div style={textBoxStyle}>{this.props.text}</div>\r\n                <Button variant='primary' style={buttonStyles} onClick={this.editSavedText}>Edit</Button>\r\n                <Button variant='primary' style={buttonStyles} onClick={this.goToStudyMode}>Study</Button>\r\n                <Button variant='primary' style={buttonStyles} onClick={this.addNewText}>Add new text</Button>\r\n                <Button variant='primary' style={buttonStyles} onClick={this.deleteText}>Delete</Button>\r\n                <Toast style={alertStyle} onClose={this.handleClose} delay={3000} autohide>\r\n                    <Toast.Body>Your text has been saved!</Toast.Body>\r\n                </Toast>\r\n            </div>\r\n        )\r\n\r\n} else if (this.props.mode === 'edit-saved'){\r\n\r\n            return (\r\n                <div style={mainAreaStyles}>\r\n                    <input style={textAreaStyles} value={this.state.currentTitle} onChange={this.handleChangeTitle}></input>\r\n                    <textarea rows='20' cols='80' value={this.state.userTextInput} onChange={this.handleChangeText} style={textAreaStyles}></textarea>\r\n                    <Button variant='primary' style={buttonStyles} onClick={this.saveEditedText}>Save</Button>\r\n                </div>\r\n                )\r\n\r\n    } else if (this.props.mode === 'study') {\r\n\r\n            return (\r\n\r\n                <div>\r\n                    <div style={textBoxStyle}>\r\n                        <GrabbedText title={this.props.title} text={this.props.text} knownWords={this.props.knownWords} editText={this.editSavedText} deleteText={this.deleteText}/>\r\n                    </div>\r\n                </div>\r\n            )\r\n    } \r\n    }\r\n    }\r\n\r\nexport default Reader ","import React from 'react'\r\n\r\nconst TextCatalogue = (props) => {\r\n\r\nconst listStyle = {\r\n    listStyleType: 'none'\r\n}\r\n\r\nconst textCatalogueStyle = {\r\n    marginBottom: '50px'\r\n}\r\n\r\nconst headingStyle = {\r\n    paddingTop: '50px',\r\n    paddingBottom: '25px'\r\n}\r\n\r\nconst linkStyle = {\r\n    fontSize: '30px'\r\n}\r\n\r\nconst linkDivStyle = {\r\n    paddingBottom: '25px'\r\n}\r\n\r\nif (props.savedTexts !== '') {\r\n\r\nvar textsArray = props.savedTexts.map(function(item, index){\r\n    return (\r\n        <div key={item.timeAndDate} style={linkDivStyle}>\r\n            <ul style={listStyle}>\r\n                <li>{item.timeAndDate}</li>\r\n                <li><a style={linkStyle} href='#/' onClick={props.goToReader} id={item.title}>{item.title}</a></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n})\r\n}\r\n\r\nreturn (\r\n    <div style={textCatalogueStyle}>\r\n        <h2 style={headingStyle}>Your texts: </h2>\r\n        <div>{textsArray}</div>\r\n    </div>\r\n)\r\n}\r\n\r\nexport default TextCatalogue","import React from 'react';\r\nimport './Wordlist.css';\r\nimport {Button, ButtonGroup, Form} from  'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst WordListCheckbox = (props) => {\r\n    // You can change the button types with the following variables\r\n    var onBtn = \"success\",  offBtn='secondary';\r\n    if (props.selection.includes('Nouns')) { var nounsBtn = onBtn }\r\n      else {nounsBtn = offBtn}\r\n    if (props.selection.includes('Verbs')) { var verbsBtn = onBtn }\r\n      else {verbsBtn = offBtn}\r\n    if (props.selection.includes('Adjectives')) { var adjBtn = onBtn }\r\n      else {adjBtn = offBtn}\r\n    return (\r\n        <div>\r\n            <h2>Types of words</h2>\r\n            <p>Select which types of words you would like to include in the word list</p>\r\n            <ButtonGroup vertical>            \r\n              <Button variant={nounsBtn} onClick={()=>props.click('Nouns')} >Nouns</Button>\r\n              <Button variant={verbsBtn} onClick={()=>props.click('Verbs')} >Verbs</Button>\r\n              <Button variant={adjBtn}  onClick={()=>props.click('Adjectives')}>Adjectives</Button>\r\n            </ButtonGroup>\r\n            <p>Pronouns are not included. But, if you a click a verb, you will see them listed there</p>\r\n            <p></p>\r\n            <Form>\r\n              <Form.Group>\r\n                <Form.Control type='text' placeholder='Search for a word' onChange={props.changeSearch} />\r\n              </Form.Group>\r\n              <Form.Group>\r\n                <Form.Check \r\n                  type='checkbox' \r\n                  label='Must be at start of word'\r\n                  onChange={props.changeCheckBox} />\r\n              </Form.Group>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordListCheckbox;","import React from 'react';\r\nimport WordListCheckbox from './WordListCheckbox';\r\nimport { Container, Row, Col, Button } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst WordListDisplay = (props) =>  {\r\n    var wordList = ['the']; \r\n    // you can add a random word in above to test word modal on unknown words in list, eg: 'surprise!'];\r\n    if (props.types.includes('Nouns')) {\r\n        for (var i in props.words.nouns) {\r\n            wordList.push(props.words.nouns[i].english)\r\n        }\r\n    }\r\n    if (props.types.includes('Verbs')) {\r\n        for (i in props.words.verbs) {\r\n            wordList.push(props.words.verbs[i].english)\r\n        }\r\n    }\r\n    if (props.types.includes('Adjectives')) {\r\n        for (i in props.words.adjectives) {\r\n            wordList.push(props.words.adjectives[i].english)\r\n        }\r\n    }\r\n    wordList = wordList.filter(x=>props.searchFromStart?\r\n        x.toLowerCase().indexOf(props.searchFor.toLowerCase())===0 \r\n        : x.toLowerCase().includes(props.searchFor.toLowerCase()))\r\n       .sort().map(x => <Button key={x} variant='link' onClick={()=>props.wordClick(x)} >{x}</Button>);\r\n\r\n    if (wordList.length === 0) {\r\n        var dictionaryLink = 'https://en.bab.la/dictionary/english-czech/'+props.searchFor;\r\n        var dictionaryJSX = <p>Try a <a \r\n            href={dictionaryLink} target=\"_blank\" rel=\"noopener noreferrer\" >dictionary</a></p>; \r\n    } \r\n    \r\n    return (\r\n        <div>\r\n            <Container>\r\n                <Row>\r\n                  <Col>\r\n                     <WordListCheckbox \r\n                       selection={props.types} \r\n                       click={props.changeTypes}\r\n                       changeSearch={props.changeSearch}\r\n                       changeCheckBox={props.changeCheckBox}\r\n                     />\r\n                  </Col>\r\n                  <Col>\r\n                     <h2>Words I know</h2>\r\n                     <div id=\"wordList\"><p>{wordList}</p></div>\r\n                     { dictionaryJSX }\r\n                     <p>Click on a word to see its {props.words.foreignLang} translation</p>\r\n                     <p>Or I can test your ability to translate simple random sentences on the test page. <br />\r\n                        (Click the tab above)</p>\r\n                  </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordListDisplay;","import React from 'react';\r\nimport './TestPage.css';\r\nimport {Button, Form} from  'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst TestPage = (props) => {  \r\n    \r\n  if (props.transMode === 'fromEng') {\r\n      var questionSentence = props.testQ.english;\r\n      var answerSentence = props.testQ.foreign;\r\n      var placeHolderText = 'Provide the '+props.language+' translation';\r\n    } else {\r\n        questionSentence = props.testQ.foreign;\r\n        answerSentence = props.testQ.english;\r\n        placeHolderText = 'Provide the English translation';\r\n  }   \r\n\r\n  var answerWords = answerSentence.toLowerCase().split(' ');\r\n  var markedAns = props.userAns === '' ? <span>I'll mark your answer here</span> \r\n      : props.userAns.split(' ').map((x, i) => {\r\n        if (x.toLowerCase() === answerWords[i]) {\r\n            return <span className='goodWord' key={i}>{x+' '}</span>\r\n        }\r\n        return <span className='badWord' key={i}>{x+' '}</span>\r\n        })\r\n\r\n  \r\n  return (\r\n      <div id='testpage'>\r\n        <h2>Translate the following</h2>\r\n        <p id='question'>{questionSentence}</p>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Control \r\n              type='text' \r\n              placeholder={placeHolderText}\r\n              value={props.userAns} \r\n              onChange={props.changeAns} />\r\n          </Form.Group>\r\n        <Button variant='primary' onClick={props.switchModeClick}>Translate the other way</Button>\r\n        </Form>\r\n        <p></p>\r\n        <div id='answer'>{markedAns}</div>\r\n        <p>If your translation matches what I'm thinking of, then your words will be green. \r\n          If a word is red, then that is not what I am thinking of. <br />\r\n          If you get the complete sentence, I will reward you with a new question!</p>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default TestPage;","// use this so much, it is just needed for easier access:\r\nconst randInt = (n) => Math.floor(Math.random()*n);\r\nconst capitalise = (w) => w.replace(/^\\w/, (c) => c.toUpperCase())\r\nconst rndElement = (arr) => arr[randInt(arr.length)];\r\n\r\n// make a random sentence \"The noun is adjective\"\r\n// this is Czech specific at the moment. Change it to find the verb to be.\r\nconst theNounIsAdj = (defArt, noun, adj) => {    \r\n    var englishSentence = 'The '+noun.english +' is '+ adj.english;\r\n    //NB: 'the' needs to match gender too\r\n    var foreignSentence = capitalise(defArt.foreign[noun.gender]) \r\n        +' '+noun.foreign +' je '+ adj.foreign[noun.gender];\r\n\r\n    return {english:englishSentence, foreign:foreignSentence}\r\n}\r\n\r\n// make a random sentence \"Pronoun verbing\"\r\n// remember prounouns are listed ['I', 'you', 'he', 'she', 'it', 'we','you','they']\r\n// while present tense is given as [1stSing, 2ndSing, 3rdSing, 1stPlur, 2ndPlur, 3rdPlur]\r\nconst pronounVerb = (pronouns, verb) => {\r\n    var person = randInt(8);\r\n    var verbPerson = [0, 1, 2, 2, 2, 3, 4, 5][person]\r\n\r\n    var englishSentence = capitalise(pronouns.english[person]) + ' ' + verb.present[verbPerson];\r\n    var foreignSentence = capitalise(pronouns.foreign[person]) + ' ' + verb.presentForeign[verbPerson];\r\n    return {english: englishSentence, foreign:foreignSentence }\r\n}\r\n\r\nexport const rndSentence = (wList) => {\r\n    var noun1 = rndElement(wList.nouns);   \r\n    var verb1 = rndElement(wList.verbs);\r\n    var adj1 = rndElement(wList.adjectives);\r\n\r\n    var sentenceType = randInt(2); // change this to constant while developing new sentence test\r\n    switch (sentenceType) {\r\n        case 0 : return theNounIsAdj(wList.defArticle, noun1, adj1);\r\n        case 1 : return pronounVerb(wList.pronouns, verb1);\r\n        default : return {english:\"I don't have a sentence for this\", foreign:'Ja blazen'}\r\n    }\r\n    \r\n}","import React from 'react';\r\nimport {Modal, Button, Table} from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nconst FindWord = (word, wordList) => {\r\n// the wordType property has been added to vocab, so that all words can be put in one list\r\n    var allWords = wordList.nouns\r\n                        .concat(wordList.verbs, wordList.adjectives, wordList.defArticle)\r\n                        .filter(x=>x.english===word);\r\n// if that list contains only one word matching the given word, return that word\r\n// otherwise return an error\r\n    if (allWords.length === 1) {\r\n        return allWords[0]\r\n    } else {\r\n        if (allWords.length > 1) {\r\n            return {english:word, wordType:\"occurs more than once in list\"}\r\n        }\r\n    }\r\n// the word wasn't found in known words, so how did it get into the list on the knowWords tab?\r\n    return {english:'??'+word+'??', wordType:\"I can't find that word\"}\r\n}\r\n\r\nconst MakeBody = (word) => {\r\n    switch (word.wordType) {\r\n        case 'definite article' : return mfnBody(word);\r\n        case 'adjective' : return mfnBody(word);\r\n        case 'noun' : return nounBody(word);\r\n        case 'verb' : return verbBody(word);\r\n        case 'occurs more than once in list' : return \"I don't know what to show you!\"\r\n        case \"I can't find that word\" : return \"How did this word get on the known word list?\"\r\n        default : return \"This is a type of word I've never seen before!\"\r\n    }\r\n}\r\n\r\nconst verbBody = (word) => {\r\n    return (\r\n        <div>\r\n            <h3>infinitive: {word.infinitive}</h3>\r\n            <Table striped bordered hover responsive>\r\n              <thead>\r\n                  <tr>\r\n                      <th>tense</th>\r\n                      <th>Ja</th>\r\n                      <th>Ty</th>\r\n                      <th>On/Ona/Ono</th>\r\n                      <th>My</th>\r\n                      <th>Vy</th>\r\n                      <th>Oni</th>\r\n                  </tr>\r\n              </thead>\r\n              <tbody>\r\n                  <tr>\r\n                      <td>Present</td>\r\n                      <td>{word.presentForeign[0]}</td>\r\n                      <td>{word.presentForeign[1]}</td>\r\n                      <td>{word.presentForeign[2]}</td>\r\n                      <td>{word.presentForeign[3]}</td>\r\n                      <td>{word.presentForeign[4]}</td>\r\n                      <td>{word.presentForeign[5]}</td>\r\n                  </tr>\r\n              </tbody>\r\n            </Table>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst nounBody = (word) => {\r\n    var wordAndGender = word.foreign + ' (' + word.gender[0] + ')';\r\n    return <h3>{wordAndGender}</h3>\r\n}\r\n\r\nconst mfnBody = (word) => {\r\n    var m = word.foreign.male ? word.foreign.male : '---';\r\n    var f = word.foreign.female ? word.foreign.female : '---';\r\n    var n = word.foreign.neuter ? word.foreign.neuter : '---';\r\n\r\n    return (\r\n        <Table striped bordered hover responsive>\r\n            <thead>\r\n                <tr>\r\n                    <th>Male</th>\r\n                    <th>Female</th>\r\n                    <th>Neuter</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr>\r\n                    <td>{m}</td>\r\n                    <td>{f}</td>\r\n                    <td>{n}</td>\r\n                </tr>\r\n            </tbody>\r\n        </Table>\r\n    )\r\n\r\n}\r\n\r\nconst WordModal = (props) => {\r\n    var word2Modal = FindWord(props.word, props.wList);\r\n    var modalBody = MakeBody(word2Modal)\r\n    return (\r\n        <Modal show={props.show} onHide={props.onHide} centered >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>{word2Modal.english} -- {word2Modal.wordType}</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body><p>{props.wList.foreignLang + ' uses:'}</p>{modalBody}</Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={props.onHide}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" disabled>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport const doNotShow = <Modal show={false} />\r\n\r\nexport default WordModal","/*\r\n!!!!!!!!!!!!!!!!!!!!!!!! IMPORTANT\r\nWhen you add properties for plurals/other tenses/accusative etc\r\nUpdate the modals to include that data when a word is clicked in the wordlist\r\n*/\r\n\r\nclass Noun {\r\n    constructor(eng) {\r\n        this.english = eng;\r\n    }\r\n    wordType= 'noun';\r\n    set foreign(f) {\r\n        this._foreign = f;\r\n    } \r\n    get foreign() {\r\n        return this._foreign;\r\n    }\r\n    set gender(g) {\r\n        this._gender = g;\r\n    }\r\n    get gender() {\r\n        return this._gender;\r\n    }\r\n}\r\n\r\nclass Verb {\r\n    constructor(eng) {\r\n        this.english = eng;\r\n    }\r\n    wordType= 'verb';\r\n    \r\n    set infinitive(f) {\r\n        this._infinitive = f\r\n    }\r\n    get infinitive() {\r\n        return this._infinitive\r\n    }\r\n\r\n    set present(arr) {\r\n        // the array will list the present tense in order [first, you, he, we, you2, they]\r\n        if (arr.length === 6) {\r\n            this._present = Array.from(arr)\r\n        } else {/*need to throw an error */}\r\n    }\r\n    // this is untidy, but you get present tense \r\n    // you get the whole array of 6\r\n    // first person is zero-th element of array\r\n    get present() {\r\n        return this._present;\r\n    }\r\n\r\n    set presentForeign(arr) {\r\n        if (arr.length === 6) {\r\n            this._presentForeign = Array.from(arr)\r\n        } else {/*need to throw an error */}\r\n    }\r\n\r\n    get presentForeign() {\r\n        return this._presentForeign\r\n    }\r\n}\r\n\r\nclass Adjective {\r\n    constructor(eng) {\r\n        this.english = eng\r\n    }\r\n    wordType= 'adjective';\r\n\r\n    set foreign(arr) {\r\n        // abandoning the idea that this would be [stem, group]\r\n        // the structure is [male, female, neuter]\r\n        // actually: using the same structure as the defArticle will simplify the creation of \r\n        // a test sentence. So send an array to this method, it will create an object\r\n        this._foreign = {male:arr[0], female:arr[1], neuter:arr[2]}\r\n    }\r\n\r\n    get foreign() {\r\n        return this._foreign\r\n    }\r\n}\r\n\r\nvar beer = new Noun('beer');\r\nbeer.foreign = 'pivo';\r\nbeer.gender = 'neuter';\r\nvar wine = new Noun('wine');\r\nwine.foreign = 'vino';\r\nwine.gender = 'neuter';\r\nvar dog = new Noun('dog');\r\ndog.foreign = 'pes';\r\ndog.gender = 'male';\r\nvar table = new Noun('table');\r\ntable.foreign = 'stul';\r\ntable.gender = 'male';\r\nvar banana = new Noun('banana');\r\nbanana.foreign = 'banan';\r\nbanana.gender = 'male';\r\nvar tree = new Noun('tree');\r\ntree.foreign = 'strom';\r\ntree.gender = 'male'\r\nvar bed = new Noun('bed');\r\nbed.foreign = 'postel';\r\nbed.gender = 'female';\r\nvar woman = new Noun('woman');\r\nwoman.foreign = 'zena';\r\nwoman.gender = 'female';\r\nvar man = new Noun('man');\r\nman.foreign = 'muz';\r\nman.gender = 'male';\r\nvar car = new Noun('car');\r\ncar.foreign = 'auto';\r\ncar.gender = 'neuter';\r\nvar gift = new Noun('gift');\r\ngift.foreign = 'darek';\r\ngift.gender = 'male';\r\nvar hospital = new Noun('hospital');\r\nhospital.foreign = 'nemocnice';\r\nhospital.gender = 'female';\r\nvar night = new Noun('night');\r\nnight.foreign = 'noc';\r\nnight.gender = 'female';\r\nvar dandelion = new Noun('dandelion');\r\ndandelion.foreign = 'pampeliska';\r\ndandelion.gender = 'female'\r\n\r\nvar toBe = new Verb('to be');\r\ntoBe.infinitive = 'byt';\r\ntoBe.present = ['am', 'are', 'is', 'are', 'are', 'are'];\r\ntoBe.presentForeign = ['jsem', 'jsi', 'je', 'jsme', 'jste', 'jsou'];\r\nvar toDo = new Verb('to do');\r\ntoDo.infinitive = 'delat';\r\ntoDo.present = ['do', 'do', 'does','do','do','do'];\r\ntoDo.presentForeign = ['delam', 'delas', 'dela', 'delame', 'delate', 'delaji']\r\n\r\n// remember: foreign adjectives don't stay as arrays\r\n// they are accessed by property name, eg: old.foreign.male\r\nvar young = new Adjective('young');\r\nyoung.foreign = ['mlady', 'mlada', 'mlade'];\r\nvar old = new Adjective('old');\r\nold.foreign = ['stary', 'stara', 'stare'];\r\nvar small = new Adjective('small');\r\nsmall.foreign = ['maly', 'mala', 'male'];\r\nvar large = new Adjective('large');\r\nlarge.foreign = ['velky', 'velka', 'velke']; \r\nvar blue = new Adjective('blue');\r\nblue.foreign = ['modry', 'modra', 'modre'];\r\nvar green = new Adjective('green');\r\ngreen.foreign = ['zeleny', 'zelena', 'zelene'];\r\nvar beautiful = new Adjective('beautiful');\r\nbeautiful.foreign = ['krasny', 'krasna', 'krasne'];\r\nvar healthy = new Adjective('healthy');\r\nhealthy.foreign = ['zdravy', 'zdrava', 'zdrave'];\r\nvar strong = new Adjective('strong');\r\nstrong.foreign = ['silny', 'silna', 'silne'];\r\nvar cold = new Adjective('cold');\r\ncold.foreign = ['studeny', 'studena', 'studene'];\r\nvar hot = new Adjective('hot');\r\nhot.foreign = ['horky', 'horka', 'horke'];\r\n\r\n\r\nexport var wordList = {\r\n    foreignLang : 'Czech',\r\n    defArticle : {\r\n        english: 'the', \r\n        foreign: {male:'ten', female:'ta', neuter:'to'}, \r\n        wordType:'definite article'},\r\n    pronouns : {\r\n        english: ['I', 'you', 'he', 'she', 'it', 'we','you','they'],\r\n        foreign: ['ja', 'ty', 'on', 'ona', 'ono', 'my', 'vy', 'oni']\r\n    },\r\n    nouns : [beer, wine, dog, table, banana, woman, man, tree, bed, car, gift, hospital, night, dandelion],\r\n    verbs : [toBe, toDo],\r\n    adjectives : [young, old, small, large, blue, green, beautiful, healthy, strong, cold, hot] \r\n}","import React from 'react';\r\nimport Reader from './Components/Reader';\r\nimport TextCatalogue from './Components/TextCatalogue'\r\nimport WordListDisplay from './Components/WordListDisplay';\r\nimport TestPage from './Components/TestPage';\r\nimport {rndSentence} from './Components/TestMaker';\r\nimport WordModal from './Components/WordModal';\r\nimport {wordList} from './Assets/Vocab';\r\nimport './App.css';\r\nimport {Tabs, Tab} from  'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    knownWords : wordList,\r\n    typesToShow : ['Nouns', 'Verbs', 'Adjectives'], \r\n    translationMode : 'fromEng', \r\n    userAnswer: '',\r\n    sentences: rndSentence(wordList), \r\n    tabToShow: 'testPage',\r\n    savedTexts: '',\r\n    text: '',\r\n    title: '',\r\n    readerMode: 'paste',\r\n    wordToSearchFor: '',\r\n    searchFromStart: false,\r\n    showWordModal: false, \r\n    modalWord: 'the'\r\n  }\r\n\r\n  changeToShow = (category) => {\r\n    var ttShow = Array.from(this.state.typesToShow);\r\n    if (ttShow.includes(category)) {\r\n      ttShow = ttShow.filter(x => x!==category)\r\n    } else {ttShow.push(category)}\r\n    this.setState({typesToShow: ttShow});\r\n  }\r\n\r\n  switchModeHandler = () => {\r\n    if (this.state.translationMode === 'fromEng') {\r\n      var newMode = 'toEng'\r\n    } else {newMode = 'fromEng'}\r\n    this.setState({translationMode: newMode})\r\n  }\r\n\r\n  ChangeAnswerHandler = (event) => {\r\n    if (this.state.translationMode === 'fromEng') {\r\n      var ans = this.state.sentences.foreign\r\n    } else {ans = this.state.sentences.english}\r\n    \r\n    if (event.target.value.toLowerCase() === ans.toLowerCase()) {\r\n      this.setState({sentences: rndSentence(this.state.knownWords), userAnswer:''})\r\n    } else { this.setState({userAnswer:event.target.value}) }\r\n  }\r\n\r\n\r\n  changeSearchWord = (event) => {\r\n    this.setState({wordToSearchFor:event.target.value})\r\n  }\r\n\r\n  wordClicked = (word) => this.setState({modalWord: word, showWordModal:true});\r\n\r\n  modalClose = () => this.setState({showWordModal:false});\r\n\r\n  saveText = (timeAndDate, title, text) => {\r\n\r\n    var newTextObj = {\r\n      timeAndDate: timeAndDate,\r\n      title: title,\r\n      text: text\r\n    }\r\n  \r\n    this.saveToLocalStorage(newTextObj)\r\n  }\r\n\r\n  changeStartChecked = (event) => {\r\n    this.setState({searchFromStart:!this.state.searchFromStart})\r\n  }\r\n\r\n  //methods related to reader and text catalogue are below (in alphabetical order)\r\n\r\n  clearStateTextInfo = () => {\r\n    this.setState(\r\n      {title: '', text: ''}\r\n    )\r\n  }\r\n  \r\n  componentWillMount = () => {\r\n    if (localStorage.getItem('savedTexts') != null) {\r\n      var savedTexts = JSON.parse(localStorage.getItem('savedTexts'))\r\n      this.setState(\r\n        {savedTexts: savedTexts}\r\n      )\r\n    } else {\r\n      this.setState(\r\n        {savedTexts: ''}\r\n        )\r\n    }\r\n  }\r\n\r\n  deleteText = () => {\r\n\r\n  let textTitle = this.state.title\r\n  let savedTexts = JSON.parse(localStorage.getItem('savedTexts'))\r\n\r\n  for (let i = 0; i < savedTexts.length; i++) {\r\n    if (savedTexts[i].title === textTitle) {\r\n      savedTexts.splice(i, 1)\r\n    }\r\n    localStorage.setItem('savedTexts', JSON.stringify(savedTexts))\r\n    this.componentWillMount()\r\n    this.clearStateTextInfo()\r\n    this.setState(\r\n      {readerMode: 'paste', tabToShow: 'TextCatalogue'}\r\n    )\r\n  }\r\n  }\r\n\r\ngoToReader = (e) => {\r\n  var textTitle = e.target.id\r\n  var matchingTextArray = this.state.savedTexts.filter(text => text.title === textTitle)\r\n  var matchingText = matchingTextArray[0].text\r\n  this.setState({tabToShow: 'Reader', readerMode: 'read', text: matchingText, title: textTitle})\r\n  e.preventDefault()\r\n}\r\n\r\nsaveEditedText = (editedTitle, editedText) => {\r\n  var savedTexts = JSON.parse(localStorage.getItem('savedTexts'))\r\n  for (let i = 0; i < savedTexts.length; i++) {\r\n    if (savedTexts[i].title === this.state.title) {\r\n      savedTexts[i].title = editedTitle\r\n      savedTexts[i].text = editedText\r\n      localStorage.setItem('savedTexts', JSON.stringify(savedTexts))\r\n      this.componentWillMount()\r\n      this.updateTitle(savedTexts[i].title)\r\n      this.updateText(savedTexts[i].text)\r\n      break\r\n    } \r\n  }\r\n  \r\n}\r\n\r\n//why does this method not work if I pass App's state values (title & text) rather than the same as vars from Reader?\r\nsaveText = (timeAndDate, title, text) => {\r\n  var newTextObj = {\r\n    timeAndDate: timeAndDate,\r\n    title: title,\r\n    text: text\r\n    }\r\n    this.saveToLocalStorage(newTextObj)\r\n  }\r\n\r\nsaveToLocalStorage = (textObj) => {\r\n  let savedTexts\r\n  \r\n  if (localStorage.getItem('savedTexts') != null) {\r\n    savedTexts = JSON.parse(localStorage.getItem('savedTexts'))\r\n    savedTexts.push(textObj);\r\n  } else {\r\n    savedTexts = []\r\n    savedTexts.push(textObj);\r\n    }\r\n    localStorage.setItem('savedTexts', JSON.stringify(savedTexts))\r\n    this.componentWillMount()\r\n  }\r\n\r\nupdateReaderMode = (mode) => {\r\n  this.setState(\r\n    {readerMode: mode}\r\n    )\r\n  }\r\n\r\nupdateText = (text) => {\r\n  this.setState(\r\n    {text: text}\r\n    )\r\n  }\r\n\r\nupdateTitle = (title) => {\r\n  this.setState(\r\n    {title: title}\r\n    )\r\n  }\r\n\r\nrender() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"App-header\">Word Box</h1>\r\n      <Tabs\r\n        activeKey={this.state.tabToShow}\r\n        onSelect={key => this.setState({tabToShow:key})}\r\n        variant = 'pills'\r\n        fill\r\n        >\r\n        <Tab eventKey='Reader' title='Analyse text'>\r\n          <Reader \r\n            knownWords={this.state.knownWords} \r\n            saveText={this.saveText} \r\n            mode={this.state.readerMode} \r\n            updateMode={this.updateReaderMode} \r\n            updateText={this.updateText} \r\n            updateTitle={this.updateTitle} \r\n            text={this.state.text} \r\n            title={this.state.title} \r\n            saveEditedText={this.saveEditedText} \r\n            clearStateTextInfo={this.clearStateTextInfo} \r\n            deleteText={this.deleteText} />\r\n        </Tab>\r\n        <Tab eventKey='TextCatalogue' title='Saved Texts'>\r\n          <TextCatalogue savedTexts={this.state.savedTexts} goToReader={this.goToReader}/>\r\n        </Tab>\r\n        <Tab eventKey='WordList' title='Known Words'>\r\n          <WordListDisplay \r\n            words={this.state.knownWords} \r\n            types={this.state.typesToShow}\r\n            changeTypes={this.changeToShow}\r\n            searchFor={this.state.wordToSearchFor}\r\n            changeSearch={this.changeSearchWord}\r\n            searchFromStart={this.state.searchFromStart}\r\n            changeCheckBox={this.changeStartChecked}\r\n\r\n            wordClick={this.wordClicked}\r\n          />          \r\n\r\n        </Tab>\r\n        <Tab eventKey='testPage' title='Test Your knowledge'>\r\n          <TestPage \r\n            language={this.state.knownWords.foreignLang}\r\n            transMode={this.state.translationMode}\r\n            switchModeClick={this.switchModeHandler}\r\n            userAns={this.state.userAnswer}\r\n            testQ={this.state.sentences}\r\n            changeAns={this.ChangeAnswerHandler}\r\n            />          \r\n        </Tab>\r\n        </Tabs>\r\n        <WordModal \r\n          show={this.state.showWordModal}\r\n          onHide={this.modalClose}\r\n          word={this.state.modalWord}\r\n          wList={this.state.knownWords} />\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}